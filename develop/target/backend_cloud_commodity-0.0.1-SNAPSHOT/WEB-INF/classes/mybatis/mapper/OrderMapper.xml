<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.greyu.ysj.mapper.OrderMapper" >
  <resultMap id="BaseResultMap" type="com.greyu.ysj.entity.Order" >
    <id column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="good_id" property="goodId" jdbcType="INTEGER" />
    <result column="buy_date" property="buyDate" jdbcType="DATE" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="buy_price" property="buyPrice" jdbcType="DOUBLE" />
    <result column="ship_date" property="shipDate" jdbcType="DATE" />
    <result column="buy_count" property="buyCount" jdbcType="INTEGER" />
    <result column="buyer" property="buyer" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="BuyerResultMap" type="com.greyu.ysj.entity.Order" >
    <id column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="good_id" property="goodId" jdbcType="INTEGER" />
    <result column="buy_date" property="buyDate" jdbcType="DATE" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="buy_price" property="buyPrice" jdbcType="DOUBLE" />
    <result column="ship_date" property="shipDate" jdbcType="DATE" />
    <result column="buy_count" property="buyCount" jdbcType="INTEGER" />
    <result column="buyer" property="buyer" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="good_name" property="goodName" jdbcType="VARCHAR" />
    <result column="images" property="images" jdbcType="VARCHAR" />
    <result column="deadline" property="deadline" jdbcType="DATE" />
    <result column="top_buy_price" property="topBuyPrice" jdbcType="VARCHAR"/>
    <result column="description" property="description" jdbcType="VARCHAR"/>
    <result column="next_bid" property="nextBid" jdbcType="DOUBLE"/>
    <result column="postage" property="postage" jdbcType="DOUBLE"/>
    <result column="buyer_name" property="buyerName" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="supplier" property="supplier" jdbcType="INTEGER" />
    <result column="supplier_name" property="supplierName" jdbcType="VARCHAR" />
    <result column="supplier_phone" property="supplierPhone" jdbcType="VARCHAR" />
    <result column="supplier_email" property="supplierEmail" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    order_id, status, good_id, buy_date, buy_count, type, buy_price, ship_date, win_flag
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.greyu.ysj.entity.OrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from tb_order
    where order_id = #{orderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from tb_order
    where order_id = #{orderId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.greyu.ysj.entity.OrderExample" >
    delete from tb_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insertSelective" parameterType="com.greyu.ysj.entity.Order" >
    insert into tb_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="addressId != null" >
        address_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="remarks != null" >
        remarks,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null" >
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null" >
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.greyu.ysj.entity.OrderExample" resultType="java.lang.Integer" >
    select count(*) from tb_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tb_order
    <set >
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.addressId != null" >
        address_id = #{record.addressId,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DOUBLE},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remarks != null" >
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tb_order
    set order_id = #{record.orderId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=INTEGER},
      address_id = #{record.addressId,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=DOUBLE},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.greyu.ysj.entity.Order" >
    update tb_order
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null" >
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null" >
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.greyu.ysj.entity.Order" >
    update tb_order
    set user_id = #{userId,jdbcType=INTEGER},
      address_id = #{addressId,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      remarks = #{remarks,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
  
  <!-- ************************************ -->
  <select id="findById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
  	select
  	<include refid="Base_Column_List"/>
  	from tb_order where order_id = #{orderId}
  </select>
  <select id="findTopByPrice" resultMap="BaseResultMap" parameterType="java.lang.Integer">
  	select
  	<include refid="Base_Column_List"/>
  	from tb_order where good_id = #{goodId} order by buy_price desc Limit 1
  </select>
  <select id="findSupplierOrders" resultMap="BaseResultMap" parameterType="java.lang.Integer">
  	select t2.good_id, t2.good_name, t2.images, max(t1.buy_price) buy_price 
	from tb_order t1 inner join tb_good t2 on t1.good_id = t2.good_id
	where t2.supplier = #{supplier}
	group by t2.good_id, t2.good_name, t2.images
  </select>
  <select id="findForBuyer" resultMap="BuyerResultMap" parameterType="java.lang.Integer">
  	select
  	t1.order_id, t1.status, t1.good_id, t1.buy_date, t1.buy_count, t1.type, t1.buy_price, t1.ship_date, t1.win_flag, t1.supplier, t1.buyer,
  	t2.deadline deadline, t2.good_name good_name, t2.images images, t2.description description, t3.top_buy_price
  	from tb_order t1 inner join tb_good t2 on t1.good_id = t2.good_id 
	inner join (select t1.order_id, t1.good_id good_id, t2.buy_price top_buy_price 
		from tb_order t1 inner join (
			select t1.good_id, max(t1.buy_price) buy_price, GROUP_CONCAT(order_id order by buy_price desc, buy_date) grouped_id 
			from tb_order t1 inner join tb_good t2 on t1.good_id = t2.good_id where t1.buy_date <![CDATA[ < ]]> t2.deadline group by good_id
		) t2 on t1.good_id = t2.good_id and FIND_IN_SET(t1.order_id, t2.grouped_id) = 1) t3 on t1.good_id = t3.good_id 
  	where t1.buyer = #{userId}
  	order by t1.buy_date desc
  </select>
  <select id="findForBuyerById" resultMap="BuyerResultMap" parameterType="java.lang.Integer">
  	select
  	t1.order_id, t1.status, t1.good_id, t1.buy_date, t1.buy_count, t1.type, t1.buy_price, t1.ship_date, t1.win_flag, t1.buyer,
  	t2.deadline deadline, t2.good_name good_name, t2.images images, t2.description description, t2.next_bid, t2.postage,
  	t3.top_buy_price, t4.address address, t4.nick_name buyer_name, t4.phone phone, t2.supplier, t5.nick_name supplier_name, t5.phone supplier_phone, t5.email supplier_email
  	from tb_order t1 inner join tb_good t2 on t1.good_id = t2.good_id 
	inner join (select max(buy_price) top_buy_price, good_id from tb_order group by good_id) t3 on t1.good_id = t3.good_id
	inner join tb_user t4 on t1.buyer = t4.user_id 
	inner join tb_user t5 on t2.supplier = t5.user_id
  	where t1.order_id = #{orderId}
  	order by t1.buy_date desc
  </select>
  <select id="findByGoodIdAndBuyer" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List"/>
  	from tb_order where good_id = #{goodId} and buyer = #{buyer}
  </select>
  <insert id="insert"
          useGeneratedKeys="true"
          keyProperty="orderId"
          parameterType="com.greyu.ysj.entity.Order" >
    insert into tb_order (
    	good_id, 
    	buy_date,
    	buy_count,
    	type,
    	buy_price,
    	buyer,
    	ship_date,
    	status)
    values (
    	#{goodId,jdbcType=BIGINT}, 
    	#{buyDate,jdbcType=DATE}, 
    	#{buyCount,jdbcType=DATE}, 
    	#{type,jdbcType=VARCHAR}, 
    	#{buyPrice,jdbcType=DOUBLE}, 
    	#{buyer,jdbcType=VARCHAR},
    	#{shipDate,jdbcType=DATE},
     	#{status,jdbcType=VARCHAR})
  </insert>
  <update id="updateStatus">
  	update tb_order set status = #{status} where order_id = #{orderId}
  </update>
  <update id="update" parameterType="com.greyu.ysj.entity.Order">
  	update tb_order
  	set status = #{status},
		good_id = #{goodId},
		buy_date = #{buyDate},
		buy_count = #{buyCount},
		type = #{type},
		buy_price = #{buyPrice},
		supplier = #{supplier},
		ship_date = #{shipDate},
		buyer = #{buyer}
	where order_id = #{orderId}
  </update>
</mapper>